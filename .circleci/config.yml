# Configuration file anchors
generate-version-file: &generate-version-file
  run:
    name: Create a version.json
    command: |
      # Create a version.json Ã -la-mozilla
      # https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
      printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
        "$CIRCLE_SHA1" \
        "$CIRCLE_TAG" \
        "$CIRCLE_PROJECT_USERNAME" \
        "$CIRCLE_PROJECT_REPONAME" \
        "$CIRCLE_BUILD_URL" > src/backend/joanie/version.json

version: 2
jobs:
  # Git jobs
  # Check that the git history is clean and complies with our expectations
  lint-git:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/joanie
    steps:
      - checkout
      # Make sure the changes don't add a "print" statement to the code base.
      # We should exclude the ".circleci" folder from the search as the very command that checks
      # the absence of "print" is including a "print(" itself.
      - run:
          name: enforce absence of print statements in code
          command: |
            ! git diff origin/main..HEAD -- . ':(exclude).circleci' | grep "print("
      - run:
          name: Check absence of fixup commits
          command: |
            ! git log | grep 'fixup!'
      - run:
          name: Install gitlint
          command: |
            pip install --user requests gitlint
      - run:
          name: lint commit messages added to main
          command: |
            ~/.local/bin/gitlint --commits origin/main..HEAD

  # Check that the CHANGELOG has been updated in the current branch
  check-changelog:
    docker:
      - image: cimg/base:2022.06
    working_directory: ~/joanie
    steps:
      - checkout
      - run:
          name: Check that the CHANGELOG has been modified in the current branch
          command: |
            git whatchanged --name-only --pretty="" origin..HEAD | grep CHANGELOG

  # Check that the CHANGELOG max line length does not exceed 80 characters
  lint-changelog:
    docker:
      - image: debian:stretch
    working_directory: ~/joanie
    steps:
      - checkout
      - run:
          name: Check CHANGELOG max line length
          command: |
            # Get the longuest line width (ignoring release links)
            test $(cat CHANGELOG.md | grep -Ev "^\[.*\]: https://github.com/openfun" | wc -L) -le 80

  # ---- Docker jobs ----
  # Build the Docker image ready for production
  build-docker:
    docker:
      - image: cimg/base:2022.06
    working_directory: ~/joanie
    steps:
      # Checkout repository sources
      - checkout
      # Generate a version.json file describing app release
      - <<: *generate-version-file
      # Activate docker-in-docker
      - setup_remote_docker:
          version: 20.10.7
      # Each image is tagged with the current git commit sha1 to avoid collisions in parallel builds.
      - run:
          name: Build production image
          command: docker build -t joanie:${CIRCLE_SHA1} --target production .
      - run:
          name: Check built image availability
          command: docker images "joanie:${CIRCLE_SHA1}*"

  # ---- Backend jobs ----
  # Build backend development environment
  build-back:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/joanie
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-back-dependencies-{{ .Revision }}
      - run:
          name: Install development dependencies
          command: pip install --user .[dev]
          working_directory: src/backend
      - save_cache:
          paths:
            - ~/.local
          key: v1-back-dependencies-{{ .Revision }}

  lint-back:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/joanie/src/backend
    steps:
      - checkout:
          path: ~/joanie
      - restore_cache:
          keys:
            - v1-back-dependencies-{{ .Revision }}
      - run:
          name: Lint code with flake8
          command: ~/.local/bin/flake8 .
      - run:
          name: Lint code with isort
          command: ~/.local/bin/isort --check-only .
      - run:
          name: Lint code with black
          command: ~/.local/bin/black --check .
      - run:
          name: Lint code with pylint
          command: ~/.local/bin/pylint joanie
      - run:
          name: Lint code with bandit
          command: ~/.local/bin/bandit -c .banditrc -qr .
      - run:
          name: Type-check code with mypy
          command: ~/.local/bin/mypy .

  test-back:
    docker:
      - image: cimg/python:3.10
        environment:
          DJANGO_SETTINGS_MODULE: joanie.settings
          DJANGO_CONFIGURATION: Test
          DJANGO_SECRET_KEY: ThisIsAnExampleKeyForTestPurposeOnly
          DJANGO_JWT_PRIVATE_SIGNING_KEY: ThisIsAnExampleKeyForDevPurposeOnly
          PYTHONPATH: /home/circleci/joanie/src/backend
          DB_HOST: localhost
          DB_NAME: joanie
          DB_USER: fun
          DB_PASSWORD: pass
          DB_PORT: 5432
      # services
      - image: cimg/postgres:12.10
        environment:
          POSTGRES_DB: test_joanie
          POSTGRES_USER: fun
          POSTGRES_PASSWORD: pass
    working_directory: ~/joanie
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-back-dependencies-{{ .Revision }}
      - run:
          name: Install libpangocairo required by pdfminer.six
          command: |
            sudo apt-get update
            sudo apt-get install -y libpangocairo-1.0-0
      # While running tests, we need to make the /data directory writable for
      # the circleci user
      - run:
          name: Create writable /data
          command: |
            sudo mkdir -p /data/media && \
            sudo mkdir -p /data/static && \
            sudo chown -R circleci:circleci /data
      # Run back-end (Django) test suite
      #
      # Nota bene: to run the django test suite, we need to ensure that
      # Postgresql service is up and ready. To achieve this, we wrap the pytest
      # command execution with dockerize, a tiny tool installed in the CircleCI
      # image. In our case, dockerize will wait up to one minute that the database
      # opened its tcp port (5432).
      - run:
          name: Run tests
          command: |
            dockerize \
              -wait tcp://localhost:5432 \
              -timeout 60s \
                ~/.local/bin/pytest


  # ---- Internationalization jobs ----
  build-i18n:
    docker:
      - image: cimg/python:3.10
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/joanie/src/backend
    steps:
      - checkout:
          path: ~/joanie
      - restore_cache:
          keys:
            - v1-back-dependencies-{{ .Revision }}
      - run:
          name: Install gettext (required to make messages)
          command: |
            sudo apt-get update
            sudo apt-get install -y gettext
      # Generate and persist the translations base file
      - run:
          name: Generate a POT file from strings extracted from the project
          command: ~/.local/bin/django-admin makemessages --keep-pot --all
      - persist_to_workspace:
          root: ~/joanie
          paths:
            - src/backend/locale/django.pot

  # Restore POT files containing strings to translate and upload them to our
  # translation management tool
  upload-i18n-strings:
    docker:
      - image: crowdin/cli:3.7.9
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/joanie
    steps:
      - checkout
      - attach_workspace:
          at: ~/joanie
      - run:
          name: upload files to crowdin
          command: crowdin upload sources -c crowdin/config.yml


  # ---- Tray jobs (k8s) ----
  tray:
    machine:
      image: ubuntu-2004:202201-02
      # Prevent cache-related issues
      docker_layer_caching: false
    working_directory: ~/fun
    steps:
      - checkout
      - *generate-version-file
      - run:
          name: Build production image
          command: docker build -t joanie:${CIRCLE_SHA1} --target production .
      - run:
          name: Check built image availability
          command: docker images "joanie:${CIRCLE_SHA1}*"
      # Login to DockerHub to Publish new images
      #
      # Nota bene: you'll need to define the following secrets environment vars
      # in CircleCI interface:
      #
      #   - DOCKER_HUB_USER
      #   - DOCKER_HUB_PASSWORD
      - run:
          name: Login to DockerHub
          command: echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USER" --password-stdin
      - run:
          name: Install the kubectl client and k3d
          command: |
            export KUBECTL_RELEASE="v1.23.5"
            curl -Lo "${HOME}/bin/kubectl" "https://dl.k8s.io/release/${KUBECTL_RELEASE}/bin/linux/amd64/kubectl"
            curl -Lo /tmp/kubectl.sha256 "https://dl.k8s.io/${KUBECTL_RELEASE}/bin/linux/amd64/kubectl.sha256"
            echo "$(</tmp/kubectl.sha256) ${HOME}/bin/kubectl" | sha256sum --check
            chmod 755 "${HOME}/bin/kubectl"
            export K3D_RELEASE="v4.4.8"
            curl -Lo "${HOME}/bin/k3d" "https://github.com/k3d-io/k3d/releases/download/${K3D_RELEASE}/k3d-linux-amd64"
            curl -sL https://github.com/k3d-io/k3d/releases/download/${K3D_RELEASE}/sha256sum.txt | \
              grep _dist/k3d-linux-amd64 | \
              sed "s|_dist/k3d-linux-amd64|${HOME}/bin/k3d|" | \
              sha256sum --check
            chmod 755 "${HOME}/bin/k3d"
      - run:
          name: Run local k3d cluster & configure environment
          command: |
            curl -Lo "${HOME}/bin/init-cluster" "https://raw.githubusercontent.com/openfun/arnold/master/bin/init-cluster"
            chmod +x "${HOME}/bin/init-cluster"
            # Bootstrap the k3d cluster with the following specific settings :
            # - use standard HTTP and HTTPS ports
            # - pre-provision 15 volumes instead of 100
            MINIMUM_AVAILABLE_RWX_VOLUME=15 \
            K3D_BIND_HOST_PORT_HTTP=80 \
            K3D_BIND_HOST_PORT_HTTPS=443 \
            K3D_REGISTRY_HOST=registry.127.0.0.1.nip.io \
            K3D_ENABLE_REGISTRY=1 \
              init-cluster arnold
            # Set environment variables for the CI
            echo "export K8S_DOMAIN=$(hostname -I | awk '{print $1}')" >> $BASH_ENV
            echo 'export ARNOLD_DEFAULT_VAULT_PASSWORD="arnold"' >> $BASH_ENV
            echo 'export ANSIBLE_VAULT_PASSWORD="${ARNOLD_DEFAULT_VAULT_PASSWORD}"' >> $BASH_ENV
            echo "export ARNOLD_IMAGE_TAG=master" >> $BASH_ENV
            echo "export K3D_REGISTRY_NAME=k3d-registry.127.0.0.1.nip.io" >> $BASH_ENV
            echo "export K3D_REGISTRY_PORT=5000" >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Install arnold CLI
          command: |
            curl -Lo"${HOME}/bin/arnold" "https://raw.githubusercontent.com/openfun/arnold/master/bin/arnold"
            chmod +x "${HOME}/bin/arnold"
      - run:
          name: Setup a new Arnold project
          command: |
            arnold -c joanie -e ci setup
            arnold -d -c joanie -e ci -a joanie create_db_vault
            arnold -d -c joanie -e ci -a joanie create_app_vaults
            arnold -d -c joanie -e ci -- vault -a joanie decrypt
            sed -i 's/^# JOANIE_/JOANIE_/g' group_vars/customer/joanie/ci/secrets/joanie.vault.yml
            arnold -d -c joanie -e ci -- vault -a joanie encrypt
            VARS_FILE="group_vars/customer/joanie/ci/main.yml"
            echo "skip_verification: True" > ${VARS_FILE}
            echo "apps:" >> ${VARS_FILE}
            echo "  - name: joanie" >> ${VARS_FILE}
            echo "joanie_image_name: ${K3D_REGISTRY_NAME}:${K3D_REGISTRY_PORT}/ci-joanie/joanie" >> ${VARS_FILE}
            echo "joanie_image_tag: ${CIRCLE_SHA1}" >> ${VARS_FILE}
            echo "joanie_app_replicas: 1" >> ${VARS_FILE}
      - run:
          name: Push joanie image to the k8s cluster docker registry
          command: |
            docker tag joanie:${CIRCLE_SHA1} "${K3D_REGISTRY_NAME}:${K3D_REGISTRY_PORT}/ci-joanie/joanie:${CIRCLE_SHA1}"
            docker push "${K3D_REGISTRY_NAME}:${K3D_REGISTRY_PORT}/ci-joanie/joanie:${CIRCLE_SHA1}"
      - run:
          name: Bootstrap joanie application
          command: |
            arnold -d -c joanie -e ci -a joanie init
            arnold -d -c joanie -e ci -a joanie deploy
            kubectl -n ci-joanie get pods -l app=joanie | grep Running

  # ---- Packaging jobs ----
  package-back:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/joanie/src/backend
    steps:
      - checkout:
          path: ~/joanie
      - run:
          name: Build python package
          command: python setup.py sdist bdist_wheel
      # Persist build packages to the workspace
      - persist_to_workspace:
          root: ~/joanie
          paths:
            - src/backend/dist
      # Store packages as artifacts to download/test them
      - store_artifacts:
          path: ~/joanie/src/backend/dist

  # ---- DockerHub publication job ----
  hub:
    docker:
      - image: cimg/base:2022.05
    working_directory: ~/joanie
    steps:
      # Checkout repository sources
      - checkout
      # Generate a version.json file describing app release
      - <<: *generate-version-file
      # Activate docker-in-docker
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Build production image
          command: docker build -t joanie:${CIRCLE_SHA1} --target production .
      - run:
          name: Check built images availability
          command: docker images "joanie:${CIRCLE_SHA1}*"
      # Login to DockerHub to Publish new images
      #
      # Nota bene: you'll need to define the following secrets environment vars
      # in CircleCI interface:
      #
      #   - DOCKER_HUB_USER
      #   - DOCKER_HUB_PASSWORD
      - run:
          name: Login to DockerHub
          command: echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USER" --password-stdin
      # Tag docker images with the same pattern used in Git (Semantic Versioning)
      #
      # Git tag: v1.0.1
      # Docker tag: 1.0.1(-ci)
      - run:
          name: Tag images
          command: |
            docker images fundocker/joanie
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: main (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            docker tag joanie:${CIRCLE_SHA1} fundocker/joanie:${DOCKER_TAG}
            if [[ -n "$CIRCLE_TAG" ]]; then
                docker tag joanie:${CIRCLE_SHA1} fundocker/joanie:latest
            fi
            docker images | grep -E "^fundocker/joanie\s*(${DOCKER_TAG}.*|latest|main)"

      # Publish images to DockerHub
      #
      # Nota bene: logged user (see "Login to DockerHub" step) must have write
      # permission for the project's repository; this also implies that the
      # DockerHub repository already exists.
      - run:
          name: Publish images
          command: |
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: main (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            docker push fundocker/joanie:${DOCKER_TAG}
            if [[ -n "$CIRCLE_TAG" ]]; then
              docker push fundocker/joanie:latest
            fi

workflows:
  version: 2

  joanie:
    jobs:
      # Git jobs
      #
      # Check validity of git history
      - lint-git:
          filters:
            tags:
              only: /.*/
      # Check CHANGELOG update
      - check-changelog:
          filters:
            branches:
              ignore: main
            tags:
              only: /(?!^v).*/
      - lint-changelog:
          filters:
            branches:
              ignore: main
            tags:
              only: /.*/

      # Docker jobs
      #
      # Build images
      - build-docker:
          filters:
            tags:
              only: /.*/

      # Backend jobs
      #
      # Build, lint and test production and development Docker images
      # (debian-based)
      - build-back:
          filters:
            tags:
              only: /.*/
      - lint-back:
          requires:
            - build-back
          filters:
            tags:
              only: /.*/
      - test-back:
          requires:
            - build-back
          filters:
            tags:
              only: /.*/

      # Internationalization jobs
      #
      # Extract strings and upload them to our translation management platform
      - build-i18n:
          requires:
            - build-back
          filters:
            tags:
              only: /.*/
      - upload-i18n-strings:
          requires:
            - build-i18n
          filters:
            branches:
              only: main

      # Tray
      #
      # Deploy ralph in a k8s cluster using arnold
      - tray:
          filters:
            tags:
              only: /.*/

      # Packaging: python
      #
      # Build the python package
      - package-back:
          requires:
            - test-back
          filters:
            tags:
              only: /.*/

      # DockerHub publication.
      #
      # Publish docker images only if all build, lint and test jobs succeed
      # and it has been tagged with a tag starting with the letter v or is on
      # the main branch
      - hub:
          requires:
            - build-docker
            - test-back
            - tray
          filters:
            branches:
              only: main
            tags:
              only: /^v.*/

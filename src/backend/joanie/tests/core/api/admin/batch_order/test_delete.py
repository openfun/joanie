"""Test suite for admin BatchOrder API delete endpoint."""

from http import HTTPStatus
from unittest import mock

from django.test import TestCase

from joanie.core import enums, factories, models


class BatchOrdersAdminApiDeleteTestCase(TestCase):
    """Test suite for the admin batch orders API delete endpoint."""

    maxDiff = None

    def test_api_admin_batch_order_delete_anonymous(self):
        """Anonymous user should not be able to cancel a batch order"""
        batch_order = factories.BatchOrderFactory()

        response = self.client.delete(f"/api/v1.0/admin/batch-orders/{batch_order.id}/")

        self.assertEqual(response.status_code, HTTPStatus.UNAUTHORIZED, response.json())

    def test_api_admin_batch_order_delete_authenticated_not_admin_user(self):
        """Authenticated not admin user should not be able to cancel a batch order"""
        user = factories.UserFactory()
        self.client.login(username=user.username, password="password")

        batch_order = factories.BatchOrderFactory()

        response = self.client.delete(f"/api/v1.0/admin/batch-orders/{batch_order.id}/")

        self.assertEqual(response.status_code, HTTPStatus.FORBIDDEN, response.json())

    def test_api_admin_batch_order_delete_authenticated(self):
        """
        Authenticated admin user should be able to cancel a batch order in any state.
        In this test, we will leave the orders in state `to_own`.
        """
        admin = factories.UserFactory(is_staff=True, is_superuser=True)
        self.client.login(username=admin.username, password="password")

        states = [
            state
            for state, _ in enums.BATCH_ORDER_STATE_CHOICES
            if state != enums.BATCH_ORDER_STATE_CANCELED
        ]
        for state in states:
            with self.subTest(state=state):
                batch_order = factories.BatchOrderFactory(state=state, nb_seats=3)

                if state == enums.BATCH_ORDER_STATE_COMPLETED:
                    # store the vouchers generated
                    batch_order.generate_orders()
                    vouchers = batch_order.vouchers

                response = self.client.delete(
                    f"/api/v1.0/admin/batch-orders/{batch_order.id}/",
                    content_type="application/json",
                )

                self.assertEqual(response.status_code, HTTPStatus.NO_CONTENT)
                # Only in `completed` state we should cancel the orders else they are not generated
                if state == enums.BATCH_ORDER_STATE_COMPLETED:
                    for order in batch_order.orders.all():
                        self.assertIsNone(order.voucher)
                        self.assertEqual(order.state, enums.ORDER_STATE_CANCELED)
                    # Finally, the voucher codes should be deleted
                    self.assertFalse(
                        models.Voucher.objects.filter(code__in=vouchers).exists()
                    )

    @mock.patch("joanie.core.models.products.Order.unenroll_user_from_course_runs")
    @mock.patch("joanie.core.models.products.Order.enroll_user_to_course_run")
    def test_api_admin_batch_order_delete_authenticated_when_orders_are_completed(
        self, mock_enroll_user_to_course_run, mock_unenroll_user_from_course_runs
    ):
        """
        Authenticated admin user should be able to cancel a batch order in completed state.
        By canceling the batch order, the orders that are in state `completed` should transition
        to cancel and the associated voucher codes should be deleted. The order owner should
        also be unenrolled from the course run.
        """
        admin = factories.UserFactory(is_staff=True, is_superuser=True)
        self.client.login(username=admin.username, password="password")

        batch_order = factories.BatchOrderFactory(
            state=enums.BATCH_ORDER_STATE_COMPLETED, nb_seats=3
        )
        batch_order.generate_orders()

        # Simulate that the orders generated by the batch order have found their owners
        for order in batch_order.orders.all():
            order.owner = factories.UserFactory()
            order.flow.update()
            # They should be enrolled to the course run
            mock_enroll_user_to_course_run.assert_called_once()
            mock_enroll_user_to_course_run.reset_mock()

        # Store the voucher code value to make sure that they will be deleted after canceling
        vouchers = batch_order.vouchers

        # Now let's cancel the batch order
        response = self.client.delete(
            f"/api/v1.0/admin/batch-orders/{batch_order.id}/",
            content_type="application/json",
        )

        self.assertEqual(response.status_code, HTTPStatus.NO_CONTENT)
        # The order should not be linked to the voucher and the order's owner should be unenrolled
        #  from the course run
        for order in batch_order.orders.all():
            self.assertIsNone(order.voucher)
            self.assertEqual(order.state, enums.ORDER_STATE_CANCELED)
            mock_unenroll_user_from_course_runs.assert_called()

        # Finally, the voucher codes should be deleted
        self.assertFalse(models.Voucher.objects.filter(code__in=vouchers).exists())

# Generated by Django 4.2.11 on 2024-05-02 08:34

from django.conf import settings
from django.db import migrations, models
import uuid

from joanie.core.utils import file_checksum


def update_localized_context(apps, certificate):
    """Generate new localized context for a certificate."""
    DocumentImage = apps.get_model("core", "DocumentImage")

    context = {}

    if certificate.order:
        course = (
            certificate.order.course
            if certificate.order.course
            else certificate.order.enrollment.course_run.course
        )
        title_object = certificate.order.product
    else:
        course = certificate.enrollment.course_run.course
        title_object = certificate.enrollment.course_run.course

    new_images = set()

    for language, __ in settings.LANGUAGES:
        context[language] = {
            "course": {
                "name": title_object.safe_translation_getter(
                    "title", language_code=language
                ),
            },
            "organizations": [],
        }

        for organization in course.organizations.all():
            if organization.signature:
                signature_checksum = file_checksum(organization.signature)
                (signature, _created) = DocumentImage.objects.get_or_create(
                    checksum=signature_checksum, defaults={"file": organization.signature}
                )
                new_images.add(signature)

            if organization.logo:
                logo_checksum = file_checksum(organization.logo)
                (logo, _created) = DocumentImage.objects.get_or_create(
                    checksum=logo_checksum, defaults={"file": organization.logo}
                )
                new_images.add(logo)

            context[language]["organizations"].append(
                {
                    "name": organization.safe_translation_getter(
                        "title", language_code=language
                    ),
                    "representative": organization.signatory_representative
                                      or organization.representative,
                    "representative_profession": organization.signatory_representative_profession
                    if organization.signatory_representative
                    else organization.representative_profession,
                    "signature_id": str(signature.id),
                    "logo_id": str(logo.id),
                }
            )

    certificate.localized_context = context
    certificate.images.set(new_images)

def migrate_certificate_contexts(apps, schema_editor):
    """
    Upgrade all certificate localized contexts. This migration is in charge of
    creating all the DocumentImage instances needed for the certificates, set relation
    between certificate and those images then update localized context
    for each certificate.
    """
    Certificate = apps.get_model("core", "Certificate")
    certificates = Certificate.objects.all()
    for certificate in certificates:
        update_localized_context(apps, certificate)
    Certificate.objects.bulk_update(certificates, ["localized_context"])

class Migration(migrations.Migration):

    dependencies = [
        ('core', '0031_alter_order_state'),
    ]

    operations = [
        migrations.CreateModel(
            name='DocumentImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('checksum', models.CharField(editable=False, help_text='SHA-256 Checksum of the file', max_length=64, unique=True, verbose_name='checksum')),
                ('file', models.ImageField(editable=False, help_text='File used in the certificate', max_length=255, upload_to='', verbose_name='file')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='certificate',
            name='images',
            field=models.ManyToManyField(blank=True, editable=False, related_name='certificates', to='core.documentimage', verbose_name='images'),
        ),
        migrations.RunPython(migrate_certificate_contexts, migrations.RunPython.noop),
    ]
